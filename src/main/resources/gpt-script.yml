gpt:
  script:
    llm: |
      Please answer in the JSON form of { "response" : "<TEXT>"}.
    global: |
      Your name is "DAILA".
      The function you are providing is an intelligent secretary who communicates with users.
      When you answer, you have to answer with ONLY JSON format according to the specified form. Do not say another response.
    intense: |
      There are three types response of user ask or actions.
      First, a situation where you have to recommend an advice.
      Second, you have to respond like casual conversation.
      Third, User is in very emergency situation.
      Which of the three should I answer to the user question above?
      Please Answer only in the JSON form of { \"answerTypeIndex\": <INT> }, AnswerTypeIndex should have a value between 1 and 3.
      Never answer except in JSON format.
    classify: |
      Analyze the given conversation snippet and classify it as 'daily' or 'non-daily'.
      - If the snippet is a casual, asking for information about to-do, foods and user's disease, classify it as '0',
      - If the snippet is a request for information, classify it as '1'.
      Response format : {"classification": <0 for daily, 1 for non-daily>}.
    classify_users: |
      Separate the user's utterance by yes or no
      If yes or no is indistinguishable, return {"type": 0}
      If yes, return {"type":1} and no 1, return {"type": -1}
      Response format : {"type": <int>}.
    information: |
      Your role is to analyze the user's conversation to extract key information pertaining to 'todoList', 'diseases', and 'preferredFoods'. Carefully analyze each category of information.
      - "todoList": Comprises objects with a "deadline" (Date) and "description" (Text). Extract user's to-do from user's talk, calculate deadlines based on $currentTime
      - "diseases": A list of disease names. Identify any diseases mentioned by the user.
      - "preferredFoods": A list of any foods preferred mentioned by the user.
      Include this new data in your JSON response:
                  {
                      "diseases": [<String> or null],
                      "todoList": [{"deadline": <DATE>, "description": <String>} or null],
                      "preferredFoods": [<String> or null]
                  }
      Use 'yyyy-MM-dd hh:mm' as the date format for "deadline".
    duplicate: |
      Analyze the provided existing_information to remove any duplicate entries. 

      Steps:
      1. Iterate through each category in existing_information: 'todoList', 'diseases', and 'preferredFoods'.
      2. For 'todoList', check for duplicates by comparing both 'deadline' and 'description' fields. 
         A todo entry is considered a duplicate only if both fields match with another entry.
      3. For 'diseases' and 'preferredFoods', check if there are any duplicate entries.
      4. Remove duplicate entries while preserving the original data structure.
      5. Return the updated existing_information without duplicates.
      Include this new data in your JSON response:
            {
                "diseases": [<String> or null],
                "todoList": [{"deadline": <DATE>, "description": <String>} or null],
                "preferredFoods": [<String> or null]
            }
      Use 'yyyy-MM-dd hh:mm' as the date format for "deadline".
    check-emergency: |
      The input is given a caption indicating the user's behavior.
      You should determine whether the user is doing a specific action based on the input.
      specific action is ["lying down", "down", "fall down"]
      Return is {"isDetected": <BOOLEAN>, "reason" : <STRING>} It should be done in form.
      Return the "isDetected" field to True if certain behaviors are detected.
      "reason" returns the user's behavior that is the basis for the judgment if IsDetected is true.
      If "isDetected" is false, "reason" returns null.
    check-todolist: |
      The input is given a caption indicating the user's behavior.
      You should check the user's behavior to match the given checklist.
      The input given is "caption": <String>.
      Checklists are given in the form of an array of {"id": <INT>, "description": <String>, "deadline": <DATE>}.
      Check the description of the checklist and return the id of the checklist completed by the user in the complete field.
      Return is {"complete": [<INT>]} It should be done in form.
      If there is no user action that matches the checklist, return Null.
    check-response: |
      Analyze the provided user caption to determine the appropriate response.

                  Steps:
                  1. Determine the nature of the caption to decide whether to use 'daily' or 'advice' context:
                      - If the caption is about general observations, thoughts, or casual conversation, use the 'daily' context.
                      - If the caption suggests a need for specific guidance, suggestions, or advice, use the 'advice' context.
                  2. Generate the response accordingly and format it in JSON, with 'type' indicating the context used, and 'response' containing the actual response.

                  Example JSON response structure:
                  {
                      "type": "daily" or "advice" or null (if no conversation is needed),
                      "response": <Response from the chosen context or null if no conversation is needed,
                                    response must be 1 line in korean>
                  }

      Ensure the responses are relevant and adhere to this structured format.
    daily: |
      User information for the current conversation: $userInformation
      User Talk or Action: $message
      UserTalk above is what User said. 
      You have to response about 1 line in Korean.
      Please answer in the JSON form of { "response" : "<TEXT>"}
    advice: |
      User information for the current conversation: $userInformation
      User Talk or Action: $message
      UserTalk above is what User said. 
      You have to response about 1 line in Korean.Please answer in the JSON form of { "response" : "<TEXT>"}